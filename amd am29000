amd am29000

2. Kokia buvo elementinė kompiuterio/procesoriaus bazė (relės,
vakuuminės lempos, tranzistoriai, magnetinės šerdys, integriniai
grandynai (IC) – ar jie hibridiniai, mažo integracijos masto, Didelio
integracijos masto (LSI), labai didelio integracijos masto (VLSI), ar
tai buvo monokristaliniai šiuolaikiniai mikroprocesoriai)? Kokios buvo
fizinės įrangos savybės (svoris, dydis, energijos suvartojimas)?

The AMD Am29000, released in may 1988 contained 428,000 transistors on a 1-micron process with a 0.8-micron effective channel length.
source: 
Wikipedia contributors. (2024, May 9). AMD Am29000. In Wikipedia, The Free Encyclopedia. 
Retrieved 22:14, December 18, 2024, from 
https://en.wikipedia.org/w/index.php?title=AMD_Am29000&oldid=1223052875

The weight of the Am29000 chip is minimal.
source: idk look at it

Size :	1.1" x 1.1" / 2.8cm x 2.8cm
Maximum power dissipation : 	2.31 Watt
source: https://www.cpu-world.com/CPUs/29000/AMD-Am29000-20KC.html

3. Kokio tipo architektūrą turėjo abu kompiuteriai? Ar jie buvo
akumuliatoriniai, registriniai, stekiniai (dėklo architektūros),
atmintis-į-atmintį architektūros arba kokios nors kitos architektūros?

The 29k evolved from the same Berkeley RISC design
source: https://en.wikipedia.org/wiki/AMD_Am29000

4. Ar tai buvo beadresinės (stekinės), vieno adreso, dviejų adresų,
trijų adresų ar keturios adresų mašinos?

The AMD AM29000 is Three-address instruction architecture.
source: http://bitsavers.informatik.uni-stuttgart.de/components/amd/Am29000/1987_Am29000_Users_Manual.pdf

5. Kokie buvo registrai abiejose architektūrose? Ar šios architektūros
iš viso turėjo registrus? Ar tai buvo bendrosios paskirties registrai,
ar specializuoti registrai? Kiek registrų turėjo kiekviena
architektūra?  Kokie buvo šių registrų duomenų pločiai? Kokia buvo
specifinė registrų paskirtis?

It was here that the 29000 differed from earlier designs, using a variable window size. 
It also added more registers, including the same 128 registers for the procedure stack, but adding another 64 for global access.
The 29000 also extended the register window stack with an in-memory (and in theory, in-cache) stack. 
When the window filled the calls would be pushed off the end of the register stack into memory, restored as required when the routine returned. 
Generally, the 29000's register usage was considerably more advanced than competing designs based on the Berkeley concepts.

source: wiki

The Am29000 contains 23 special-purpose registers. These registers provide controls and
data for certain processor functions.
Special-purpose registers are accessed by data movement only. Any special-purpose
register can be written with the contents of any general-purpose register, and any
general-purpose register can be written with the contents of any special-purpose register.
Operations cannot be directly performed on the contents of special-purpose registers.
Some special-purpose registers are protected, and can be accessed only in the Supervisor
mode. This restriction applies to both read and write accesses. An attempt by a
User-mode program to access a protected register causes a trap to occur.

src:
http://bitsavers.informatik.uni-stuttgart.de/components/amd/Am29000/1987_Am29000_Users_Manual.pdf

6. Ar požymių bitai buvo naudojami šiose architektūrose? Kokie
požymiai buvo naudojami?

The AMD Am29000 did not implement flags

7. Koks buvo kiekvienos architektūros duomenų plotis (mašininis žodis)?

The AMD Am29000 was a 32-bit architecture, with a machine word size of 32 bits.
wiki

8. Koks buvo kiekvienos sistemos atminties išdėstymas? Ar adresų buvo
erdvė ištisinė, ar ji buvo suskirstytas į segmentus, puslapius,
atminties į bankus? Koks buvo (efektyvus) adreso plotis? Koks buvo
maksimalus įmanomas atminties kiekis kiekvienoje sistemoje? Koks buvo
tipiškas atminties kiekis, su kuria sistema buvo naudojama?

Address Spaces
External instructions and data are contained in one of four, 32-bit address-spaces:
1) InstructionlData Memory.
2) Input/Output.
3) Coprocessor.
4) Instruction Read-Only Memory (Instruction ROM).
An address in the InstructiOn/Data Memory address-space may be treated as virtual or
physical, as determined by the Current Processor Status Register. Address translation for
data accesses is enabled separately from address translation for instruction accesses. A
program in the Supervisor mode may temporarily disable address translation for individual
loads and stores; this permits load-real and store-real operations.
It is possible to partition physical instruction and data addresses into two, separate
physical address-spaces. However, virtual instruction and data addresses appear in the
same virtual address-space (i.e instruction/data memory). 

4 giga-byte virtual address space
source: http://bitsavers.informatik.uni-stuttgart.de/components/amd/Am29000/1987_Am29000_Users_Manual.pdf

9. Ar buvo palaikoma virtualioji atmintis ir kaip? Ar virtuali atmintis
buvo realizuoti, naudojant puslapiavimą, segmentavimą, abu šiuos
mechanizmus?

10. Kokia buvo kiekvienos architektūros komandų sistema (ISA)? Kiek
mašinos komandų turėjo kiekviena architektūra? Kokios buvo instrukcijų
(komandų) klasės?  Kokius instrukcijų formatus palaikė kiekviena
architektūra?  Pateikite 8–16 instrukcijų pavyzdžiai. Kokios komandos
buvo panašios abi architektūros? Kurios komandos skyrėsi?

The Am29000 instruction set contains 115 instructions. These instructions are divided
into 9 classes:
1) Integer Arithmetic-perform integer add, subtract, multiply, and divide operations.
2) Compare-perform arithmetic and logical comparisons. Some instructions in this
class allow the generation of a trap if the comparison condition is not met.
3) Logical-perform a set of bit-wise Boolean operations.
4) Shift-perform arithmetic and logical shifts, and allow the extraction of 32-bit
words from 64-bit double-words.
2-5
5) Data Movement-perform mqvement of data fields between registers, and the
movement of data to and from external devices and memories.
6) Constant-allow the generation of large constant values in registers.
7) Floating-Point-included for floating-point arithmetic, comparisons, and format
conversions. These instructions are not currently implemented directly in
processor hardware.
8) Branch-perform program jumps and subroutine calls.
9) Miscellaneous-perform miscellaneous control functions and operations not
provided by other classes. 

JMPT Jump True
JMPTI Jump True Indirect
LOAD Load
LOADL Load and Lock
LOADM Load Multiple
LOADSET Load and Set
MFSR Move from Special Register
MFTLB Move from Translation Look-Aside Buffer Register
MTSR Move to Special Register
MTSRIM Move to Special Register Immediate
MTTLB Move to Translation Look-Aside Buffer Register
MUL Multiply Step
MULL Multiply Last Step
MULTIPLY Integer Multiply
MULU Multiply Step, Unsigned
NAND NAND Logical 

source: http://bitsavers.informatik.uni-stuttgart.de/components/amd/Am29000/1987_Am29000_Users_Manual.pdf

11. Kokius adresavimo būdus palaikė kiekviena architektūra?
Kurie režimai buvo panašūs, o kurie skyrėsi?

register-addressing
idirect register addressing

12. Kokios buvo kiekvienos architektūros I/O galimybės?

13. Ar buvo palaikomi pertraukimai? Kuo pertraukimų mechanizmai buvo
panašūs, kuo jie skyrėsi abiejose architektūrose?

Normal program flow may be preempted by an interrupt or trap for which the processor is
enabled. The effect on the processor is identical for interrupts and traps; the distinction is
in the different mechanisms by which interrupts and traps are enabled. It is intended that
interrupts be used for suspending current program execution and causing another program
to execute, while traps are used to report errors and exceptional conditions.

14. Kokius duomenų tipus palaikė kiekviena architektūra aparatūros
lygyje? Ar buvo palaikoma fiksuoto kablelio, slankiojo kablelio
aritmetika? Ar sveikieji skaičiai buvo koduojami kaip ženklas-dydis,
kaip vieneto papildinys (atvirkštinis kodas), dvejeto papildyti
(papildomas kodas)? Kokius kitus „egzotiškus“ duomenų tipus palaikė
architektūra (pvz. dešimtainius skaičius, kompleksinius skaičius ir
kt.)?

Data Types 

A word is defined as 32 bits of data. A half-word consists of 16 bits, and a double-word
consists of 64 bits. Bytes are 8 bits in length. The Am29000 has direct support for
word.-integer(signed and unsigned), word-logical, word-Boolean, half-word integer (signed
and unsigned), and character (byte) data.
Other data types, such as character strings, are supported with sequences of basic
instructions and/or external hardware. Single- and double-precision floating-point types
are defined for the Am29000, but are not directly supported by hardware.
The format for Boolean data used by the processor is such that the Boolean values TRUE
and FALSE are represented by 1 and 0, respectively, in the most-significant bit of a word.


Most Am29000 instructions deal directly with word-length integer data; integers may be
either signed or unsigned, depending on the instruction. Some instructions (e.g. AND)
treat word-length operands as strings of bits. In addition, there is support for character,
half-word, and Boolean data types. Single-precision and double-precision floating- point
data types are defined, but not directly supported by processor hardware. 

src: http://bitsavers.informatik.uni-stuttgart.de/components/amd/Am29000/1987_Am29000_Users_Manual.pdf

The 29050 was notable for being early to feature a floating point unit capable of executing one multiply–add operation per cycle.
src: wiki

15. Kokia buvo kiekvienos sistemos greitaveika? Kokie buvo taktinių
generatorių dažniai, vidutinis/mažiausias/didžiausias ciklų skaičius,
reikalingas kiekvienai komandai įvykdyti, vidutinė sistemos
greitaveika? Kuri sistema buvo našesnė? Koks buv kainos ir našumo
santykis?


25 MHz nominal operating frequency.
• 17 million instructions per second sustained.
• 1.5 clock cycles per instruction average. 
src: http://bitsavers.informatik.uni-stuttgart.de/components/amd/Am29000/1987_Am29000_Users_Manual.pdf

16. Ar architektūros naudojo spartinančią atmintį? Jei taip, kokio
dydžio?

A Branch Target Cache (512 bytes on the 29000 and 1024 bytes on the 29050) 
stored sets of 4 or 2 sequential instructions found at the branch target address, reducing the instruction fetch latency during taken branches
src: wiki

17. Kokios buvo tipinės kiekvienos architektūros taikymo sritys? Kaip
šios architektūros buvo naudojamos? Trumpai apibūdinkite (vienoje
pastraipoje) vieną konkretų kiekvienos architektūros panaudojimo
pavyzdį.

The Honeywell 29KII is a CPU based on the AMD 29050, and it was extensively used in real-time avionics.

Positioned as a product for "medium- to high-performance embedded applications" with potential for use in Unix workstations, 
the 29000 was used in a variety of products such as X terminals, laser printer controller cards, graphics accelerator cards, 
optical character recognition solutions, and network bridges. 
The memory architecture of the 29000 was a particular attraction for product designers, allowing them to forego external cache memory and to employ dynamic 
RAM directly while maintaining acceptable performance,
permitting a degree of flexibility in the choice of memory technologies used to retain program instructions and data.

One notable product utilising the 29k was Apple's Macintosh Display Card 8·24 GC for its Macintosh IIfx, 
featuring a 30 MHz Am29000 processor, 64 KB static RAM cache, and 2 MB of video RAM, with the option of an additional 
2 MB of dynamic RAM for use by the QuickDraw graphical toolkit. 
The inclusion of the 29k differentiated this particular version of the card from other versions sold by Apple, 
significantly improving performance when handling 24-bits-per-pixel images.

src: wiki

18. Kiek programinės įrangos buvo parašyta kiekvienai aptariamai
architektūrai, ar ji (vis dar) prieinama, kur ji buvo naudojama? Kokie
buvo prieinami kompiliatoriai ir programavimo įrankiai (derintojai,
profiliuotojai, surinkėjai)? Kokios programinės įrangos bibliotekos
buvo prieinamos?

19. (neprivaloma) ar yra emuliatorių abiem architektūroms?  Jei tokių
rasite, pateikite jų URL ir (arba) leidinio metaduomenis.
